<?xml version="1.0" encoding="utf-8"?><!--   Copyright (c) 2008. Adobe Systems Incorporated.   All rights reserved.   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are met:     * Redistributions of source code must retain the above copyright notice,       this list of conditions and the following disclaimer.     * Redistributions in binary form must reproduce the above copyright notice,       this list of conditions and the following disclaimer in the documentation       and/or other materials provided with the distribution.     * Neither the name of Adobe Systems Incorporated nor the names of its       contributors may be used to endorse or promote products derived from this       software without specific prior written permission.   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   POSSIBILITY OF SUCH DAMAGE.--><mx:Panel   xmlns:mx="http://www.adobe.com/2006/mxml"   xmlns="*"   xmlns:data="flexunit.flexui.data.*"   xmlns:controls="flexunit.flexui.controls.*"   styleName="mainPanel"   width="100%"   height="100%"   minHeight="500"   minWidth="850"   verticalScrollPolicy="off"   horizontalScrollPolicy="off"   modalTransparencyBlur="0"   modalTransparency="0"   implements="org.flexunit.runner.notification.IRunListener"   creationComplete="handleCreationComplete()" >   <mx:Metadata>      [Event( name="testsComplete", type="flexunit.flexui.event.TestsCompleteEvent")]   </mx:Metadata>	<mx:Style 	   source="/css/FlexUnitComponents.css" 	   />	      <mx:Script>      <![CDATA[      	import org.flexunit.runner.IDescription;      	import org.flexunit.runner.Descriptor;      	import org.flexunit.runner.notification.Failure;      	import org.flexunit.runner.Result;      	import org.flexunit.runner.Description;         import flash.net.navigateToURL;         import mx.managers.ToolTipManager;         import mx.controls.ToolTip;         import flexunit.flexui.controls.FlexUnitLabels;         import flexunit.flexui.event.TestsCompleteEvent;         import flexunit.flexui.data.TestFunctionRowData;         /*import flexunit.framework.AssertionFailedError;         import flexunit.framework.TestCase;         import flexunit.framework.Test;*/         import mx.controls.listClasses.ListBase;         import mx.core.ScrollPolicy;         public var test : *;// TODO: [XB] was  Test;         private function handleCreationComplete() : void         {            ToolTip.maxWidth = 900;            rightHandSide.model = model;            leftHandSide.model = model;            model.filterSectionEnabled = false;         }         public function startTest() : void         {            // if( test != null )            {               // model.totalTests = test.countTestCases(); // TODO: [XB] reenable this               model.launchTests();               rightHandSide.launchTests();               leftHandSide.launchTests();            }         }         private function addTestToList(                     description : IDescription,                     failure : Failure = null ) : void         {               var rowAdded : TestFunctionRowData;               rowAdded = model.addTestRowToHierarchicalList( description, failure );                              leftHandSide.testCasesContainer.allTestsHierarchyTree.verticalScrollPosition                      = leftHandSide.testCasesContainer.allTestsHierarchyTree.maxVerticalScrollPosition;                              /*if( ! success )               {                  model.rowSelected = rowAdded;//               }*/         }         //---------------------------------------------------------------------         // IFlexWriter Methods         //---------------------------------------------------------------------		public function testRunStarted( description:IDescription ):void {			this.startTest();		}				public function testRunFinished( result:Result ):void {			rightHandSide.onAllTestsEnd();            leftHandSide.onAllTestsEnd();            dispatchEvent( new TestsCompleteEvent() );		}				public function testStarted( description:IDescription ):void {		}			public function testFinished( description:IDescription ):void {			if( ! leftHandSide.testCasesContainer.allTestsHierarchyTree.selectable )            {               model.numTestsRun++;               addTestToList( description, null );               rightHandSide.onTestEnd();                              rightHandSide.selectedTestCaseForm.assertionsPerTest.invalidateProperties();            }		}			public function testFailure( failure:Failure ):void {			model.addFailure();            addTestToList( failure.description, failure );            rightHandSide.selectedTestCaseViewStack.selectedIndex = 1;		}			public function testAssumptionFailure( failure:Failure ):void {		}			/**		 * Called when a test will not be run, generally because a test method is annotated 		 * with {@link org.junit.Ignore}.		 * 		 * @param description describes the test that will not be run		 */		public function testIgnored( description:IDescription ):void {		}		         /*         public function onSuccess( test : Test ) : void         {            if( ! leftHandSide.testCasesContainer.allTestsHierarchyTree.selectable )            {               addTestToList( true, test );            }         }         public function onError( test : Test, error : Error ) : void         {            model.addError();                        addTestToList( false, test, error );            rightHandSide.selectedTestCaseViewStack.selectedIndex = 1;         }         public function onFailure(                     test : Test,                     error : AssertionFailedError ) : void         {            model.addFailure();            addTestToList( false, test, error, true );            rightHandSide.selectedTestCaseViewStack.selectedIndex = 1;         }*/         // To replace Binding MetaTag         private function updateRowSummaryToDisplay() : void         {            rightHandSide.updateRowSummaryToDisplay();            leftHandSide.updateScrollPosition();         }      ]]>   </mx:Script>   <data:TestRunnerBasePresentationModel      id="model"      rowSelectedChanged="updateRowSummaryToDisplay()"      testSuiteRunDurationChanged="rightHandSide.updateRunDuration()"      totalErrorsChanged="rightHandSide.updateTotalErrorUI()"      totalFailuresChanged="rightHandSide.updateTotalFailureUI()"      progressChanged="rightHandSide.onTestEnd()"      filterEnableChanged="leftHandSide.updateFilterSectionEnable()"      filterChanged="leftHandSide.refreshTree()"      />      <mx:HBox      verticalAlign="bottom"      horizontalGap="0">      <controls:Title         text="{ FlexUnitLabels.FLEXUNIT_RUNNER }"         styleName="panelTitleStyle"         width="175"         />            <controls:Title         text="{ FlexUnitLabels.POWERED_BY_ADOBE_CONSULTING }"         styleName="panelTitleSubStyle"         useHandCursor="true"         buttonMode="true"         mouseChildren= "false"         click="navigateToURL( new URLRequest( 'http://www.adobe.com/consulting/' ) )"         />         </mx:HBox>         <mx:HRule      styleName="flexUnitHRule"      width="100%"      />      <mx:HDividedBox      width="100%" height="100%"      horizontalGap="30"      paddingTop="5"      paddingBottom="30"      paddingLeft="25"      paddingRight="25">         <controls:LeftHandSide         id="leftHandSide"         />            <controls:RightHandSide         id="rightHandSide"         />      </mx:HDividedBox></mx:Panel>