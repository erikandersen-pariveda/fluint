#summary Ant Tasks for use with the AIR Test Runner
#labels Featured

= Introduction =
The combination of the AIRTestRunner and the provided Ant Tasks are a powerful way to use Fluint with an automated build system. If you have not yet done so, be sure to synchronize the source for these projects.

The full source for both the AIRTestRunner and the ANT Tasks are available in the directory reporsitory.

However, should you prefer, both of these items are also available as a JAR and AIR file repsectively from the downlaods page.

==Requirements:==
	* The [http://code.google.com/p/fluint/downloads/list fluint Test Runner for AIR].
	* [http://ant.apache.org/ Ant] 1.6.x or later.

==How to use the fluint Ant tag <fluint>:==

	Place FluintAnt.jar in your system class path so Ant can find it, or import it into the Ant script at runtime with a <PATH> tag
{{{
	<path id="libraries">
		<fileset dir="${targetdir}">
	        	<include name="**/*.jar"/>
	        </fileset>
	</path>
}}}
	Import and define the fluint Ant tag in your build script with the classname "net.digitalprimates.ant.tasks.fluint.Fluint".
{{{
	<taskdef name="fluint"
		classname="net.digitalprimates.ant.tasks.fluint.Fluint"
		classpathref="libraries" />	
}}}

	Now that the fluint Ant tag has been defined in your build file you can call it with the <fluint> tag, like so:
{{{
	<target name="test">
		<fluint
			debug="true"
			headless="true"
			testRunner="C:\Program Files\FluintAIRTestRunner\FluintAIRTestRunner.exe"
			outputDir="C:\temp\test">
				<fileset dir="C:\temp\test">
	            	<include name="**/*.*"/>
				</fileset>
		</fluint>
	</target>
}}}

The attributes of the <fluint> tag are:
	* debug="true|false" - Return debug information to the console

	* headless="true|false" - To run the AIR application in a headless (no UI) mode, or to launch and run the AIR application as a full application. 

*Note:* this does not mean this can be launched from a truly headless server. Fluint will still instantiate visual objects, just not waste the time showing you a tree and progress bar. Further, the application will close immediately upon completion of the tests.

	* testRunner="" - The path to your installed copy of the fluint AIR TestRunner application.

	* outputDir="" - The location where the test runner should write the test results. A file named fluintResults.xml will be created by default that contains the results of the latest testing session.

	* fileset - A fileset of all .swf files to load for testing (compiled as mx:Modules). 

*Note:* If you provide directories as opposed to files for the fileset option, the AIR testrunner will recurse those directories looking for .swf files to load as modules.

= Sample Test Module =
The following source shows a sample module which will run the framework test suite:
{{{
<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" implements="net.digitalprimates.fluint.modules.ITestSuiteModule">
	<mx:Script>
		<![CDATA[
			import net.digitalprimates.fluint.unitTests.frameworkSuite.FrameworkSuite;
			public function getTestSuites():Array {
				var suiteArray:Array = new Array();
				suiteArray.push( new FrameworkSuite() );
				return suiteArray;
			}
		]]>
	</mx:Script>	
</mx:Module>
}}}

The module must implement the net.digitalprimates.fluint.modules.ITestSuiteModule interface, which simply requires that it has a getTestSuites() method which returns an array of TestSuite instances.